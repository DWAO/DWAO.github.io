<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2020/02/04/test/"/>
      <url>/2020/02/04/test/</url>
      
        <content type="html"><![CDATA[<p><img src="/.com//a.PNG" alt="a"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap分析</title>
      <link href="/2020/02/03/HashMap%E5%88%86%E6%9E%90/"/>
      <url>/2020/02/03/HashMap%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>capacity： 容量。</li><li>loadFactor: 负载因子。</li><li>threshold: 扩容边界，等于 capacity*loadFactor.当大于这个数时进行扩容。</li><li>size: 键值对数量。</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="JDK7"><a href="#JDK7" class="headerlink" title="JDK7"></a>JDK7</h3><p>​    底层使用数组和链表结合使用。通过key的hashCode经过扰动函数处理得到hash值，再通过<strong>(n-1)&amp;hash</strong> 获取当前存放的位置。如果存在key则进行覆盖，反之使用链地址解决。</p><p>​    <img src="/.com//HashMap-JDK7-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.PNG" alt="HashMap-JDK7-数据结构"></p><p>PS：扰动函数避免实现比较差的hashcode方法导致较多的碰撞冲突。</p><h4 id="扰动函数算法"><a href="#扰动函数算法" class="headerlink" title="扰动函数算法"></a>扰动函数算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line"></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  <span class="comment">//jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></span><br><span class="line">     <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);  <span class="comment">//第三步 取模运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>#### put 原理</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    Entry[] oldTable = table; <span class="comment">// 引用旧数组</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="comment">// 扩容前数组是2^30,修改扩容极限为2^31-1，</span></span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">    <span class="keyword">boolean</span> oldAltHashing = useAltHashing;</span><br><span class="line">    useAltHashing |= sun.misc.VM.isBooted() &amp;&amp;</span><br><span class="line">        (newCapacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class="line">    <span class="keyword">boolean</span> rehash = oldAltHashing ^ useAltHashing;</span><br><span class="line">    <span class="comment">// 将旧数组转移到新数组里</span></span><br><span class="line">    transfer(newTable, rehash);</span><br><span class="line">    table = newTable;</span><br><span class="line">    <span class="comment">// 计算新的扩容极限</span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 重新计算索引</span></span><br><span class="line">            <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">            <span class="comment">// 元素转移会逆置，如原插入3-5,变成5-3</span></span><br><span class="line">            e.next = newTable[i];</span><br><span class="line">            newTable[i] = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h3><p>​    底层较JDK7明显的变化是： </p><ol><li>当链表长度大于8时，会将链表自动转化为红黑树。红黑树的设计出现为了解决二叉查找树在某些情况下会退化成一种线性结构。</li><li>扩容使用的是2次幂儿增长，所以原元素要么在原位置，要么在原位置移动2次方幂，主要看增长位是0还是1.</li></ol><p>扰动函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 (n-1) &amp; hash 得到索引位置</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;   <span class="comment">//jdk1.8 &amp; jdk1.7</span></span><br><span class="line">     <span class="keyword">int</span> h;</span><br><span class="line">     <span class="comment">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class="line">     <span class="comment">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class="line">     <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Put原理"><a href="#Put原理" class="headerlink" title="Put原理"></a>Put原理</h4><ol><li>判断哈希桶数组是否为空或null，否之执行resize扩容</li><li>根据key计算hash值得到哈希桶数组索引，若table[i]为null，直接插入，转向6.否则3。</li><li>判断table[i]首个元素是否和key相同，相同（hashcode和equals）则覆盖，反之转4。</li><li>判断table[i]是否是treeNode(红黑树),如果是红黑树，在树中插入键值对，反之转向5。</li><li>遍历table[i]判断链表长度是否大于8，大于8转为红黑树，在红黑树进行插入操作。遍历过程中，若发现key存在直接覆盖value。</li><li>插入成功，判断键值对数量是否超过threshold。如果超过，进行扩容。</li></ol><p>函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// 极限增长为原来的两倍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 增长位为0，即转移到新表的原位置</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 转移到新表的原位置+2次方幂位置</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非线程安全"><a href="#非线程安全" class="headerlink" title="非线程安全"></a>非线程安全</h2><p>HashMap非线程安全，会出现环形链，以JDK7 为例说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapInfiniteLoop</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;(<span class="number">2</span>，<span class="number">0.75f</span>);  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        map.put(<span class="number">5</span>， <span class="string">"C"</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="string">"Thread1"</span>) &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                map.put(<span class="number">7</span>, <span class="string">"B"</span>);  </span><br><span class="line">                System.out.println(map);  </span><br><span class="line">            &#125;;  </span><br><span class="line">        &#125;.start();  </span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="string">"Thread2"</span>) &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                map.put(<span class="number">3</span>, <span class="string">"A);  </span></span><br><span class="line"><span class="string">                System.out.println(map);  </span></span><br><span class="line"><span class="string">            &#125;;  </span></span><br><span class="line"><span class="string">        &#125;.start();        </span></span><br><span class="line"><span class="string">    &#125;  </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>启动两个线程，同时debug到transfer方法中，放开线程1的断点到*<em>Entry next = e.next; *</em> 再放开线程2的断点至完成，此时数据结构如下：</li></ol><p>​    PS: 此时线程1的e指向的key(3)，next为key(7), 执行完以下代码时，e指向了key(7)，且e的next由于线程2指向了key(3).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> e.next = newTable[i];</span><br><span class="line">newTable[i] = e;</span><br><span class="line">e = next;</span><br></pre></td></tr></table></figure><ol start="2"><li>e = key(3)完成循环后数据结构如图</li><li>e = key(7)完成循环后结构如下图</li><li>e = key(3)完成循环后需下图</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList浅析</title>
      <link href="/2020/01/30/ArrayList%E6%B5%85%E6%9E%90/"/>
      <url>/2020/01/30/ArrayList%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>Q：ArrayList 和 LinkedList的区别？<br>A：ArrayList 底层使用数组存储数据， LinkedList使用双向链表实现。两者都是非线程安全。</p><p>Q：ArrayList的扩容机制？<br>A：ensureCapacityInternal扩容过程：</p><ol><li>计算保存数据的最小容量<br> 默认容量是12.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保足够的空间存储数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算最小容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>若存储最小容量大于当前数组容量，进行扩容</li></ol><ul><li>估算新容量等于原容量的1.5倍，取最小存储容量和新容量的最大值。</li><li>与数组容量最大值比较。若大于则根据最小存储容量和数组容量最大值进行比较，选择新存储容量</li><li>拷贝数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="comment">// 不直接分配Integer.MAX_VALUE是避免JVM不支持分配这么多内存</span></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Q: ArrayList 实现RandomAccess接口的意义？<br>A： 迭代是使用get直接获取元素，未实现接口则需要迭代器遍历访问。</p><p>Q： System.arraycopy() 和Arrays.copyOf()的区别与联系？<br>A： System.arraycopy实现向目的数组复制指定位置和数量的元素。<br>    Arrays.copyOf()主要用于数组扩容，内部使用System.arraycopy()方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Get和Post的区别</title>
      <link href="/2020/01/30/Get%E5%92%8CPost%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/01/30/Get%E5%92%8CPost%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>Q1：Get 有长度限制，而Post没有长度限制<br>A: 长度限制只是针对浏览器而言。常说的2048个字符 指的是IE8标准，现在浏览器主键用 Chrome内核（2MB）替代，意味着2048将成为过去。</p><p>Q2: Get 发出一次请求， Post 发出两次请求？<br>A: 服务器解析请求时，先解析请求头部，决定是否处理该请求（比如权限问题），或者时根据content-type 调用响应的解析器处理数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EurekaServer源码分析</title>
      <link href="/2020/01/06/EurekaServer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/01/06/EurekaServer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1-EnableEurekaServer"><a href="#1-EnableEurekaServer" class="headerlink" title="1. @EnableEurekaServer"></a>1. @EnableEurekaServer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(EurekaServerMarkerConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableEurekaServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-EurekaServerAutoConfiguration"><a href="#2-EurekaServerAutoConfiguration" class="headerlink" title="2. EurekaServerAutoConfiguration"></a>2. EurekaServerAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2013-2019 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.cloud.netflix.eureka.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.Application;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.ext.Provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.appinfo.ApplicationInfoManager;</span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.EurekaClient;</span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.EurekaClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.converters.EurekaJacksonCodec;</span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.converters.wrappers.CodecWrapper;</span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.converters.wrappers.CodecWrappers;</span><br><span class="line"><span class="keyword">import</span> com.netflix.eureka.DefaultEurekaServerContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.eureka.EurekaServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.netflix.eureka.EurekaServerContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.eureka.cluster.PeerEurekaNode;</span><br><span class="line"><span class="keyword">import</span> com.netflix.eureka.cluster.PeerEurekaNodes;</span><br><span class="line"><span class="keyword">import</span> com.netflix.eureka.registry.PeerAwareInstanceRegistry;</span><br><span class="line"><span class="keyword">import</span> com.netflix.eureka.resources.DefaultServerCodecs;</span><br><span class="line"><span class="keyword">import</span> com.netflix.eureka.resources.ServerCodecs;</span><br><span class="line"><span class="keyword">import</span> com.netflix.eureka.transport.JerseyReplicationClient;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.api.core.DefaultResourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.spi.container.servlet.ServletContainer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.actuator.HasFeatures;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.environment.EnvironmentChangeEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EurekaConstants;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.AnnotationTypeFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ClassUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gunnar Hillert</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fahim Farook</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="comment">// 这里</span></span><br><span class="line"><span class="meta">@Import</span>(EurekaServerInitializerConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnBean</span>(<span class="title">EurekaServerMarkerConfiguration</span>.<span class="title">Marker</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(</span>&#123; EurekaDashboardProperties<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class"><span class="title">InstanceRegistryProperties</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line">@PropertySource("classpath:/eureka/server.properties")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List of packages containing Jersey resources required by the Eureka server.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] EUREKA_PACKAGES = <span class="keyword">new</span> String[] &#123;</span><br><span class="line"><span class="string">"com.netflix.discovery"</span>, <span class="string">"com.netflix.eureka"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationInfoManager applicationInfoManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EurekaServerConfig eurekaServerConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EurekaClientConfig eurekaClientConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EurekaClient eurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> InstanceRegistryProperties instanceRegistryProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@link</span> CloudJacksonJson&#125; instance.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> CloudJacksonJson JACKSON_JSON = <span class="keyword">new</span> CloudJacksonJson();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HasFeatures <span class="title">eurekaServerFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> HasFeatures.namedFeature(<span class="string">"Eureka Server"</span>,</span><br><span class="line">EurekaServerAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"eureka.dashboard"</span>, name = <span class="string">"enabled"</span>,</span><br><span class="line">matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> EurekaController <span class="title">eurekaController</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> EurekaController(<span class="keyword">this</span>.applicationInfoManager);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">CodecWrappers.registerWrapper(JACKSON_JSON);</span><br><span class="line">EurekaJacksonCodec.setInstance(JACKSON_JSON.getCodec());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerCodecs <span class="title">serverCodecs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CloudServerCodecs(<span class="keyword">this</span>.eurekaServerConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CodecWrapper <span class="title">getFullJson</span><span class="params">(EurekaServerConfig serverConfig)</span> </span>&#123;</span><br><span class="line">CodecWrapper codec = CodecWrappers.getCodec(serverConfig.getJsonCodecName());</span><br><span class="line"><span class="keyword">return</span> codec == <span class="keyword">null</span> ? CodecWrappers.getCodec(JACKSON_JSON.codecName()) : codec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CodecWrapper <span class="title">getFullXml</span><span class="params">(EurekaServerConfig serverConfig)</span> </span>&#123;</span><br><span class="line">CodecWrapper codec = CodecWrappers.getCodec(serverConfig.getXmlCodecName());</span><br><span class="line"><span class="keyword">return</span> codec == <span class="keyword">null</span> ? CodecWrappers.getCodec(CodecWrappers.XStreamXml<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">: codec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ReplicationClientAdditionalFilters <span class="title">replicationClientAdditionalFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ReplicationClientAdditionalFilters(Collections.emptySet());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PeerAwareInstanceRegistry <span class="title">peerAwareInstanceRegistry</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ServerCodecs serverCodecs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.eurekaClient.getApplications(); <span class="comment">// force initialization</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> InstanceRegistry(<span class="keyword">this</span>.eurekaServerConfig, <span class="keyword">this</span>.eurekaClientConfig,</span><br><span class="line">serverCodecs, <span class="keyword">this</span>.eurekaClient,</span><br><span class="line"><span class="keyword">this</span>.instanceRegistryProperties.getExpectedNumberOfClientsSendingRenews(),</span><br><span class="line"><span class="keyword">this</span>.instanceRegistryProperties.getDefaultOpenForTrafficCount());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PeerEurekaNodes <span class="title">peerEurekaNodes</span><span class="params">(PeerAwareInstanceRegistry registry,</span></span></span><br><span class="line"><span class="function"><span class="params">ServerCodecs serverCodecs,</span></span></span><br><span class="line"><span class="function"><span class="params">ReplicationClientAdditionalFilters replicationClientAdditionalFilters)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RefreshablePeerEurekaNodes(registry, <span class="keyword">this</span>.eurekaServerConfig,</span><br><span class="line"><span class="keyword">this</span>.eurekaClientConfig, serverCodecs, <span class="keyword">this</span>.applicationInfoManager,</span><br><span class="line">replicationClientAdditionalFilters);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EurekaServerContext <span class="title">eurekaServerContext</span><span class="params">(ServerCodecs serverCodecs,</span></span></span><br><span class="line"><span class="function"><span class="params">PeerAwareInstanceRegistry registry, PeerEurekaNodes peerEurekaNodes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultEurekaServerContext(<span class="keyword">this</span>.eurekaServerConfig, serverCodecs,</span><br><span class="line">registry, peerEurekaNodes, <span class="keyword">this</span>.applicationInfoManager);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EurekaServerBootstrap <span class="title">eurekaServerBootstrap</span><span class="params">(PeerAwareInstanceRegistry registry,</span></span></span><br><span class="line"><span class="function"><span class="params">EurekaServerContext serverContext)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> EurekaServerBootstrap(<span class="keyword">this</span>.applicationInfoManager,</span><br><span class="line"><span class="keyword">this</span>.eurekaClientConfig, <span class="keyword">this</span>.eurekaServerConfig, registry,</span><br><span class="line">serverContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the Jersey filter.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> eurekaJerseyApp an &#123;<span class="doctag">@link</span> Application&#125; for the filter to be registered</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a jersey &#123;<span class="doctag">@link</span> FilterRegistrationBean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean&lt;?&gt; jerseyFilterRegistration(</span><br><span class="line">javax.ws.rs.core.Application eurekaJerseyApp) &#123;</span><br><span class="line">FilterRegistrationBean&lt;Filter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;Filter&gt;();</span><br><span class="line">bean.setFilter(<span class="keyword">new</span> ServletContainer(eurekaJerseyApp));</span><br><span class="line">bean.setOrder(Ordered.LOWEST_PRECEDENCE);</span><br><span class="line">bean.setUrlPatterns(</span><br><span class="line">Collections.singletonList(EurekaConstants.DEFAULT_PREFIX + <span class="string">"/*"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a Jersey &#123;<span class="doctag">@link</span> javax.ws.rs.core.Application&#125; with all the resources</span></span><br><span class="line"><span class="comment"> * required by the Eureka server.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> environment an &#123;<span class="doctag">@link</span> Environment&#125; instance to retrieve classpath resources</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resourceLoader a &#123;<span class="doctag">@link</span> ResourceLoader&#125; instance to get classloader from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> created &#123;<span class="doctag">@link</span> Application&#125; object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> javax.ws.rs.core.<span class="function">Application <span class="title">jerseyApplication</span><span class="params">(Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ClassPathScanningCandidateComponentProvider provider = <span class="keyword">new</span> ClassPathScanningCandidateComponentProvider(</span><br><span class="line"><span class="keyword">false</span>, environment);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Filter to include only classes that have a particular annotation.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">provider.addIncludeFilter(<span class="keyword">new</span> AnnotationTypeFilter(Path<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">provider.addIncludeFilter(<span class="keyword">new</span> AnnotationTypeFilter(Provider<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find classes in Eureka packages (or subpackages)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Set&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String basePackage : EUREKA_PACKAGES) &#123;</span><br><span class="line">Set&lt;BeanDefinition&gt; beans = provider.findCandidateComponents(basePackage);</span><br><span class="line"><span class="keyword">for</span> (BeanDefinition bd : beans) &#123;</span><br><span class="line">Class&lt;?&gt; cls = ClassUtils.resolveClassName(bd.getBeanClassName(),</span><br><span class="line">resourceLoader.getClassLoader());</span><br><span class="line">classes.add(cls);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct the Jersey ResourceConfig</span></span><br><span class="line">Map&lt;String, Object&gt; propsAndFeatures = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">propsAndFeatures.put(</span><br><span class="line"><span class="comment">// Skip static content used by the webapp</span></span><br><span class="line">ServletContainer.PROPERTY_WEB_PAGE_CONTENT_REGEX,</span><br><span class="line">EurekaConstants.DEFAULT_PREFIX + <span class="string">"/(fonts|images|css|js)/.*"</span>);</span><br><span class="line"></span><br><span class="line">DefaultResourceConfig rc = <span class="keyword">new</span> DefaultResourceConfig(classes);</span><br><span class="line">rc.setPropertiesAndFeatures(propsAndFeatures);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(name = <span class="string">"httpTraceFilter"</span>)</span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean&lt;?&gt; traceFilterRegistration(</span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"httpTraceFilter"</span>) Filter filter) &#123;</span><br><span class="line">FilterRegistrationBean&lt;Filter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;Filter&gt;();</span><br><span class="line">bean.setFilter(filter);</span><br><span class="line">bean.setOrder(Ordered.LOWEST_PRECEDENCE - <span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerConfigBeanConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EurekaServerConfig <span class="title">eurekaServerConfig</span><span class="params">(EurekaClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">EurekaServerConfigBean server = <span class="keyword">new</span> EurekaServerConfigBean();</span><br><span class="line"><span class="keyword">if</span> (clientConfig.shouldRegisterWithEureka()) &#123;</span><br><span class="line"><span class="comment">// Set a sensible default if we are supposed to replicate</span></span><br><span class="line">server.setRegistrySyncRetries(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PeerEurekaNodes&#125; which updates peers when /refresh is invoked. Peers are</span></span><br><span class="line"><span class="comment"> * updated only if &lt;code&gt;eureka.client.use-dns-for-fetching-service-urls&lt;/code&gt; is</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;false&lt;/code&gt; and one of following properties have changed.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&lt;code&gt;eureka.client.availability-zones&lt;/code&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&lt;code&gt;eureka.client.region&lt;/code&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&lt;code&gt;eureka.client.service-url.&amp;lt;zone&amp;gt;&lt;/code&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshablePeerEurekaNodes</span> <span class="keyword">extends</span> <span class="title">PeerEurekaNodes</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">EnvironmentChangeEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ReplicationClientAdditionalFilters replicationClientAdditionalFilters;</span><br><span class="line"></span><br><span class="line">RefreshablePeerEurekaNodes(<span class="keyword">final</span> PeerAwareInstanceRegistry registry,</span><br><span class="line"><span class="keyword">final</span> EurekaServerConfig serverConfig,</span><br><span class="line"><span class="keyword">final</span> EurekaClientConfig clientConfig, <span class="keyword">final</span> ServerCodecs serverCodecs,</span><br><span class="line"><span class="keyword">final</span> ApplicationInfoManager applicationInfoManager,</span><br><span class="line"><span class="keyword">final</span> ReplicationClientAdditionalFilters replicationClientAdditionalFilters) &#123;</span><br><span class="line"><span class="keyword">super</span>(registry, serverConfig, clientConfig, serverCodecs,</span><br><span class="line">applicationInfoManager);</span><br><span class="line"><span class="keyword">this</span>.replicationClientAdditionalFilters = replicationClientAdditionalFilters;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> PeerEurekaNode <span class="title">createPeerEurekaNode</span><span class="params">(String peerEurekaNodeUrl)</span> </span>&#123;</span><br><span class="line">JerseyReplicationClient replicationClient = JerseyReplicationClient</span><br><span class="line">.createReplicationClient(serverConfig, serverCodecs,</span><br><span class="line">peerEurekaNodeUrl);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.replicationClientAdditionalFilters.getFilters()</span><br><span class="line">.forEach(replicationClient::addReplicationClientFilter);</span><br><span class="line"></span><br><span class="line">String targetHost = hostFromUrl(peerEurekaNodeUrl);</span><br><span class="line"><span class="keyword">if</span> (targetHost == <span class="keyword">null</span>) &#123;</span><br><span class="line">targetHost = <span class="string">"host"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PeerEurekaNode(registry, targetHost, peerEurekaNodeUrl,</span><br><span class="line">replicationClient, serverConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(<span class="keyword">final</span> EnvironmentChangeEvent event)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (shouldUpdate(event.getKeys())) &#123;</span><br><span class="line">updatePeerEurekaNodes(resolvePeerUrls());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Check whether specific properties have changed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldUpdate</span><span class="params">(<span class="keyword">final</span> Set&lt;String&gt; changedKeys)</span> </span>&#123;</span><br><span class="line"><span class="keyword">assert</span> changedKeys != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if eureka.client.use-dns-for-fetching-service-urls is true, then</span></span><br><span class="line"><span class="comment">// service-url will not be fetched from environment.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.clientConfig.shouldUseDnsForFetchingServiceUrls()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (changedKeys.contains(<span class="string">"eureka.client.region"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> String key : changedKeys) &#123;</span><br><span class="line"><span class="comment">// property keys are not expected to be null.</span></span><br><span class="line"><span class="keyword">if</span> (key.startsWith(<span class="string">"eureka.client.service-url."</span>)</span><br><span class="line">|| key.startsWith(<span class="string">"eureka.client.availability-zones."</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudServerCodecs</span> <span class="keyword">extends</span> <span class="title">DefaultServerCodecs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">CloudServerCodecs(EurekaServerConfig serverConfig) &#123;</span><br><span class="line"><span class="keyword">super</span>(getFullJson(serverConfig),</span><br><span class="line">CodecWrappers.getCodec(CodecWrappers.JacksonJsonMini<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class"><span class="title">getFullXml</span>(<span class="title">serverConfig</span>),</span></span><br><span class="line"><span class="class"><span class="title">CodecWrappers</span>.<span class="title">getCodec</span>(<span class="title">CodecWrappers</span>.<span class="title">JacksonXmlMini</span>.<span class="title">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java核心-java拷贝方式</title>
      <link href="/2019/12/11/java%E6%A0%B8%E5%BF%83-java%E6%8B%B7%E8%B4%9D%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/12/11/java%E6%A0%B8%E5%BF%83-java%E6%8B%B7%E8%B4%9D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java核心-javaIO深入浅出</title>
      <link href="/2019/12/11/java%E6%A0%B8%E5%BF%83-javaIO%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
      <url>/2019/12/11/java%E6%A0%B8%E5%BF%83-javaIO%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java核心-怎么保证容器是线程安全的”</title>
      <link href="/2019/12/11/java%E6%A0%B8%E5%BF%83-%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E5%AE%B9%E5%99%A8%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E2%80%9D/"/>
      <url>/2019/12/11/java%E6%A0%B8%E5%BF%83-%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E5%AE%B9%E5%99%A8%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E2%80%9D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java核心-map、hashmap、linkedHashMap</title>
      <link href="/2019/12/11/java%E6%A0%B8%E5%BF%83-map%E3%80%81hashmap%E3%80%81linkedHashMap/"/>
      <url>/2019/12/11/java%E6%A0%B8%E5%BF%83-map%E3%80%81hashmap%E3%80%81linkedHashMap/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java核心36问(六)代理模式</title>
      <link href="/2019/12/11/java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E5%85%AD-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%9F%BA%E4%BA%8E%E4%BB%80%E4%B9%88%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/12/11/java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E5%85%AD-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%9F%BA%E4%BA%8E%E4%BB%80%E4%B9%88%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><pre><code>解决业务无关的操作，如日志操作、监控等。</code></pre><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ul><li>基于反射的JDK动态代理</li><li>基于字节码代理的如ASM，cglib，Javassis</li></ul><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows查看端口占用</title>
      <link href="/2019/12/10/windows%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
      <url>/2019/12/10/windows%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>开发中偶尔会出现端口占用的情况，本文在window环境下提供相应的解决方法。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>1、 查看端口占用的进程。打开cmd输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr port</span><br></pre></td></tr></table></figure><p>回车，看到界面如下：</p><p><img src="/.com//D:%5Czzw%5Cblog%5Cimg%5Callocated-port.png" alt="image-20191210103616663"></p><p>2、 查看进程状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr 17000</span><br></pre></td></tr></table></figure><p><img src="/.com//D:%5Czzw%5Cblog%5Cimg%5Callocated-port-process" alt="image-20191210103726828"></p><p>3、任务管理器右键勾选pid，检索pid结束进程。</p><p><img src="/.com//D:%5Czzw%5Cblog%5Cimg%5Ctask-manage.png" alt="image-20191210103858927"></p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永远别在MySQL中使用uft8</title>
      <link href="/2019/12/10/%E6%B0%B8%E8%BF%9C%E5%88%AB%E5%9C%A8MySQL%E4%B8%AD%E4%BD%BF%E7%94%A8uft8/"/>
      <url>/2019/12/10/%E6%B0%B8%E8%BF%9C%E5%88%AB%E5%9C%A8MySQL%E4%B8%AD%E4%BD%BF%E7%94%A8uft8/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在开发中，尝试保存emoij表情到数据库时，出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Incorrect string value: ‘\xF0\x9F\x98\x83 &lt;…’ for column ‘summary’ at row 1</span><br></pre></td></tr></table></figure><p>客户端、服务器、数据都是UTF8 编码，却保存失败了。</p><h2 id="症结"><a href="#症结" class="headerlink" title="症结"></a>症结</h2><p>  MySQL的“utf8”实际上不是真正的UTF-8。 </p><p> “utf8”只支持每个字符最多三个字节，而真正的UTF-8是每个字符最多四个字节。 </p><p> MySQL一直没有修复这个bug，他们在2010年发布了一个叫作“utf8mb4”的字符集，绕过了这个问题。 </p><h2 id="溯源"><a href="#溯源" class="headerlink" title="溯源"></a>溯源</h2><ol><li><p>Unicode 作为最广泛的字符集，最简单的编码时UTF-32,即每个字符用32位, 但会造成大量空间被浪费。而使用UTF-8 只使用了四分之一的空间。</p></li><li><p>MySQL 在2002年9月宣布对MySQL 进行调整：“ UTF8现在最多只支持3个字节的序列 ”。</p><p>– 解析</p><p>2002年，MySQL做出了一个决定：如果用户可以保证数据表的每一行都使用相同的字节数，那么MySQL就可以在性能方面来一个大提升。为此，用户需要将文本列定义为“CHAR”，每个“CHAR”列总是拥有相同数量的字符。如果插入的字符少于定义的数量，MySQL就会在后面填充空格，如果插入的字符超过了定义的数量，后面超出部分会被截断。</p></li><li><p>为了修复这个bug，推出了utf8mb4 替代utf8。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心36问(五)-String, StringBuilder, StringBuffer的区别</title>
      <link href="/2019/12/04/Java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E4%BA%94-String-StringBuilder-StringBuffer%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/12/04/Java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E4%BA%94-String-StringBuilder-StringBuffer%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>final 修饰的不变类，其属性也是final类型，可以通过拼接、裁剪生成新对象。不变性的主要作用在于一个对象需要被多个线程共享，且访问频繁时，可以省略同步和锁等待的时间，大幅度提高系统性能。</p><p>PS：</p><ol><li>String通过 + 拼接很智能：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"a"</span>+<span class="string">"b"</span>+<span class="string">"c"</span>;<span class="comment">// 反编译下会直接转成"abc"</span></span><br></pre></td></tr></table></figure><p>​    JDK8环境下通过javac、javap反编译，可以查看经过StringBuilder拼接，JDK9之后提供了StringConcaFactory，统一字符串操作。</p><ol start="2"><li><p>OOM问题</p><p>JDK8 以前，字符串被缓存在PermPen(永久代)，这个空间除了FUllGC外不会被其他垃圾回收器回收。在JDK8以后，逐渐用MetaSpace(元数据区)替代。可以通过-xx：StringTableSize调整缓存大小。 </p></li><li><p>排重</p><p>JDK8u20 之前，需要开发者使用intern显示排重。JDK8u20之后，可以通过 -xx:+UseStringDeduplication 开启G1 GC 下字符串的排重。</p></li><li><p>字符串常量池</p><p>​        创建一个字符串时，先检查常量池是否存在值相同的字符串对象，如果存在则直接访问。反之，创建新对象放入常量池再返回响应的引用。此情况仅适用于字面量赋值，不适合new 创建的字符串。</p></li><li><p>String s = new String(“abc”)创建了几个对象？</p><p>2个对象。一个“abc”放在常量池，一个将“abc”复制到堆上，再将引用给s。</p></li></ol><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>是一个线程安全的提高字符串拼接效率的工具类。线程的安全主要通过Synchronized实现，底层使用可修改的char（JDK9之后用byte+coder），继承了AbstractStringBuilder。初始长度是16，若多次扩容，需要多次抛弃旧数组，创建新数组并通过ArrayCopy 拷贝元素。</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>同StringBuffer 一样可以提高字符串拼接效率，不同的是StringBuilder 非线程安全，可以减少线程安全的开销。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;SpringBoot-OCR&#39;</title>
      <link href="/2019/12/03/SpringBoot-OCR/"/>
      <url>/2019/12/03/SpringBoot-OCR/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java核心36问(四)什么是强引用、软瘾用、弱引用、幻象引用</title>
      <link href="/2019/12/02/Java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E5%9B%9B-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E9%A5%AE%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E5%B9%BB%E8%B1%A1%E5%BC%95%E7%94%A8/"/>
      <url>/2019/12/02/Java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E5%9B%9B-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E9%A5%AE%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E5%B9%BB%E8%B1%A1%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是引用"><a href="#什么是引用" class="headerlink" title="什么是引用"></a>什么是引用</h2><p>Java中除了基础类型的变量外，其他都是引用类型。</p><h2 id="引用的作用"><a href="#引用的作用" class="headerlink" title="引用的作用"></a>引用的作用</h2><p>不同的引用主要体现的是对象不同的可达性状态和对垃圾收集的影响.</p><h2 id="常见的引用"><a href="#常见的引用" class="headerlink" title="常见的引用"></a>常见的引用</h2><ul><li>强引用： 即我们常见的普通对象引用。只要还有强引用指向一个对象，表明对象还存活。只要超出了作用域或者显式赋值为null，即可以被垃圾收集。如平时编码的Object obj=new Object(),当JVM内存不足时，程序会异常中止，而不会尝试回收具有强引用的对象。</li><li>软引用：相对强引用弱化的引用，可以让对象避免一些垃圾收集。仅当JVM内存不足时，才会试图去回收软引用指向的对象。通过SoftReferecnce 实现，可以和引用队列联合使用，当软引用对象被垃圾回收期回收时，JVM就会将这个软引用加入到与之关联的引用队列中。通过尝试从引用队列中获取对象来判断对象是否回收</li><li>弱引用：一旦被垃圾回收器发现与弱引用时，就会在下一个回收周期回收它的内存。一般情况下提供一种访问在弱引用状态下对象的途径，可用来构建没有特定约束的关系。如维护一种非强制性的映射关系，若视图获取对象存在，则使用，反之重新实例化。</li><li>幻象引用(虚引用): 不能通过它访问独享，仅仅是提供一种确保对象被finalize以后，做某些事情的机制。比如，维护一种非强制性的Mortem清理机制。必须与引用队列联合使用，若在队列中找到引用，则进行一些额外的操作。</li></ul><h2 id="对象可达性状态流转分析"><a href="#对象可达性状态流转分析" class="headerlink" title="对象可达性状态流转分析"></a>对象可达性状态流转分析</h2><p><img src="/.com//D:%5Czzw%5Cblog%5Cimg%5Cobject-reach.png" alt="image-20191202201431631"></p><h3 id="Java-的可达性级别"><a href="#Java-的可达性级别" class="headerlink" title="Java 的可达性级别"></a>Java 的可达性级别</h3><ul><li>强可达：当一个对象可以由一个或多个线程不通过各种引用访问的情况。</li><li>软可达：当我们只能通过软引用才能访问到对象的状态。</li><li>弱可达：无法通过强引用和弱引用，只能通过弱引用访问的状态，当弱引用被清除的时候，就满足finalize 的条件 。</li><li>幻象可达：没有强、软、弱引用关联，并且finalize过，只能通过幻象引用指向这个对象。</li><li>不可达：对象被清除。</li></ul><p>PS：</p><p>​    所有的引用类型，都是抽象类 java.lang.ref.Reference的子类，除了幻象引用外，其他返回的对象都非空。</p><h3 id="引用队列使用"><a href="#引用队列使用" class="headerlink" title="引用队列使用"></a>引用队列使用</h3><p>在创建各种引用时，可以选择是否需要关联引用队列，JVM 会在特定时机将引用 sequence到队列中， 我们可以从队列中获取引用。</p><h3 id="显示影响垃圾收集"><a href="#显示影响垃圾收集" class="headerlink" title="显示影响垃圾收集"></a>显示影响垃圾收集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:SoftRefLRUPolicyMSPerMB=3000</span><br></pre></td></tr></table></figure><h3 id="Reachability-fence"><a href="#Reachability-fence" class="headerlink" title="Reachability fence"></a>Reachability fence</h3><p>通过底层API 告知JVM失去强引用的对象任由部分属性被使用。JDK9之后，java。lang。ref。Reference提供了一下方法，通知JVM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">statuc void reachabilityFence(Object ref)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心36问(三)final、finalize、finally的区别</title>
      <link href="/2019/12/02/Java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E4%B8%89-final%E3%80%81finalize%E3%80%81finally%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/12/02/Java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E4%B8%89-final%E3%80%81finalize%E3%80%81finally%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li>修饰类表明类不可以被继承</li><li>修饰方法表名方法不能重写</li><li>修饰变量表名不能重复修改，用来保护只读数据。</li></ul><p>PS： </p><ol><li>final 修饰的变量并不等于不变，常见例子是final 修饰的集合仍可以插入数据。</li><li>实现不可变的类，需做到：<ul><li>声明类是final</li><li>成员变量定义用private 和final，且不实现setter犯法</li><li>构造对象时，使用深度拷贝替代直接赋值</li><li>如果确实要实现getter方法，请使用copy-on-write，创建私有的copy。</li></ul></li></ol><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>与try 连用，保证代码执行的一种机制，常用来关闭资源。推荐用try-with-resources替代。</p><p>PS：</p><p>finally 不会被执行的几种情况：</p><ul><li>try方法内含有System.exit(1)等异常退出代码</li><li>无限循环</li><li>线程被杀死</li></ul><h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h2><p>是基础类Object的方法，目的是保证对象在垃圾收集完成前特定资源的回收，在JDK9被标记为过时。</p><p>替代的机制：</p><p>cleaner的实现利用幻想引用，一种常见的post-mortem清理机制，例子是MySQL JDBC driver之一的mysql-connector-java。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7使用firewall替代iptable</title>
      <link href="/2019/11/28/Centos7%E4%BD%BF%E7%94%A8firewall%E6%9B%BF%E4%BB%A3iptable/"/>
      <url>/2019/11/28/Centos7%E4%BD%BF%E7%94%A8firewall%E6%9B%BF%E4%BB%A3iptable/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​        使用iptables 保存开放端口时，提示错误：<strong>The service command supports only basic LSB actions (start, stop, restart, try-restart, reload, force-reload, status). For other actions, please try to use systemctl.</strong></p><p>​        查阅资料发现：</p><p>​        Centos7.x 开始，开始使用systemd替代daemon服务，systemctl命令替代以往管理系统启动和服务的命令。</p><h2 id="改造步骤"><a href="#改造步骤" class="headerlink" title="改造步骤"></a>改造步骤</h2><ol><li><p>停止防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl stop firewalld</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl mask firewalld</span></span><br></pre></td></tr></table></figure></li><li><p>安装iptable-services</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install iptables-services</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>设置开机启动防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> iptables</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>重新保存开放端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> service iptables save</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl unmask firewalld.service</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>检查防火墙状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure></li></ol><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><ol><li><p>开启防火墙</p></li><li><p>查看端口开放状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp</span><br></pre></td></tr></table></figure></li><li><p>开放端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=123/tcp --permanent</span><br></pre></td></tr></table></figure></li><li><p>重载端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>查询端口是否开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-port=123/tcp</span><br></pre></td></tr></table></figure></li><li><p>移除端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-port=123/tcp</span><br></pre></td></tr></table></figure></li><li><p>查看所有开放端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-port</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心36问(二) Error 和Exception</title>
      <link href="/2019/11/27/Java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E4%BA%8C-Error-%E5%92%8CException/"/>
      <url>/2019/11/27/Java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E4%BA%8C-Error-%E5%92%8CException/</url>
      
        <content type="html"><![CDATA[<h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><p>Exception 和Error 都继承了Throwable 类。在Java 中只有Throwable 类型才能被抛出或者捕获。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li><p>Exception：可预料的情况，可以被捕获，进行响应处理。主要分为可检查异常(checked)和不可检查异常(unchecked)。其中，可检查异常在源代码必须进行显式处理。不检查异常是所谓的运行时异常，如NPE 、ArrayOutOBoundException.</p></li><li><p>Error ： 正常情况下，一般不会发生的错误，并且大部分会导致程序处于非正常、不可恢复状态。</p></li></ul><h4 id="常见异常或错误"><a href="#常见异常或错误" class="headerlink" title="常见异常或错误"></a>常见异常或错误</h4><p><img src="/.com//D:%5Czzw%5Cbackup_blog%5Csource_posts%5Cimage-20191128231151174.png" alt="image-20191128231151174"></p><h4 id="NoClassDefFoundError-和ClassNotFoundException-的区别"><a href="#NoClassDefFoundError-和ClassNotFoundException-的区别" class="headerlink" title="NoClassDefFoundError 和ClassNotFoundException 的区别"></a>NoClassDefFoundError 和ClassNotFoundException 的区别</h4><ul><li><p>NoClassNotFoundException：发生在编译时期找不到类。</p></li><li><p>NoClassDefFoundError: JVM在编译时可以找到合适的类，而在运行时找不到合适的类引发的错误。</p><p>PS：</p><ol><li>可能引发NoClassDefFoundError的原因：</li></ol><ul><li>对应的class 在java 的classpath 中不可用；</li><li>对应类在运行jar 的mainFest文件中的classpath 属性中未定义；</li><li>程序的启动脚本覆盖了原来的classpath 变量；</li><li>NoClassDefoundException：是java.lang.LinkageError的子类，可能因为原生的类库不可用而导致。</li><li>检查日志是否由java.lang.ExceptionInitializerError的错误，若出现有可能由于静态初始化失败导致。</li><li>若存在多个不同的类加载器，也有可能导致错误出现。</li></ul></li></ul><ol start="2"><li>类加载器机制</li></ol><ul><li>委托。加载一个类的请求交给父类加载器，如果父类加载器不能找到或者加载这个类，那么再加载它。</li><li>可见性。子类的加载器可以看到父类加载器加载的类，而父类加载器看不到子类加载器加载的类。</li><li>单一性：仅加载一个类一次。</li></ul><h4 id="try-catch-resource"><a href="#try-catch-resource" class="headerlink" title="try-catch-resource"></a>try-catch-resource</h4><p>​    资源需要实现AutoCloseable 或者Closeable。</p><h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><ol><li>尽量避免捕获类似Exception的同样异常，而应该捕获特定异常。</li><li>不要生吞异常。</li><li>不要仅用e.printStackTrace, 不易排查问题， 应写入到日志系统中。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心36问(一) 怎么理解Java平台， Java是解释执行?</title>
      <link href="/2019/11/26/Java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E4%B8%80-%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3Java%E5%B9%B3%E5%8F%B0%EF%BC%8C-Java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C/"/>
      <url>/2019/11/26/Java%E6%A0%B8%E5%BF%8336%E9%97%AE-%E4%B8%80-%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3Java%E5%B9%B3%E5%8F%B0%EF%BC%8C-Java%E6%98%AF%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="Java运行流程"><a href="#Java运行流程" class="headerlink" title="Java运行流程"></a>Java运行流程</h2><p>Java 运行过程如下：</p><p>源代码通过Javac编译生成字节码，字节码再由虚拟机内部的解释器将字节码转换为最终的机器码。</p><h2 id="Java-不都是解释运行"><a href="#Java-不都是解释运行" class="headerlink" title="Java 不都是解释运行"></a>Java 不都是解释运行</h2><p>大部分的JVM，比如常见的hotspot，提供了JIT（Just In Time）编译器，即动态编译器。主要在运行时将热点代码编译成机器码，这种情况下热点代码属于编译执行，不属于解释执行。</p><h2 id="Java-平台"><a href="#Java-平台" class="headerlink" title="Java 平台"></a>Java 平台</h2><img src="/.com//zzw\backup_blog\img\Java平台.PNG" alt="Java平台"><h4 id="一次编译，处处运行"><a href="#一次编译，处处运行" class="headerlink" title="一次编译，处处运行"></a>一次编译，处处运行</h4><p>Java 编译生成的字节码，可以在任何包含JVM 环境的电脑上运行，即Java 相当于一个提供程序运行的平台，屏蔽了操作系统的底层，使开发者无需关注不同操作系统的差异性。</p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul><li>多态</li><li>封装</li><li>继承</li></ul><h4 id="JDK、JRE、JVM的区别"><a href="#JDK、JRE、JVM的区别" class="headerlink" title="JDK、JRE、JVM的区别"></a>JDK、JRE、JVM的区别</h4><ul><li>JVM： Java 虚拟机，将字节码解释运行为目的机器代码，跨平台的前提。</li><li>JRE： java 运行环境，包含JVM 和基础类库。</li><li>JDK： Jva 开发工具包，包括JVM+JRE+Java Tool。</li></ul><p>特色：</p><ul><li><p>没有指针，无需自己回收内存</p></li><li><p>泛型</p></li><li><p>JVM 基础概念和类加载机制</p></li><li><p>JDK 包含的工具</p></li></ul><h3 id="Java-编译执行浅谈"><a href="#Java-编译执行浅谈" class="headerlink" title="Java 编译执行浅谈"></a>Java 编译执行浅谈</h3><ul><li>Java 分配编译器和运行时</li><li>JVM 会通过类加载器加载字节码，解释或者编译执行。主流版本中采用解释和编译混合模式，即server模式的JVM 会进行上万次调用来手机信息进行高效的编译，client的上线是1500次。</li><li>-Xint： 告诉JVM 只进行解释执行，不对代码进行编译</li><li>-Xcomp：关闭解释器，禁止解释执行，又称最大优化级别。</li><li>AOT：将字节码直接编译成机器代码，形成静态的类库代码，可通过jaotc将模块编译成AOT库。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka or Zookeeper?</title>
      <link href="/2019/11/26/Eureka-or-Zookeeper/"/>
      <url>/2019/11/26/Eureka-or-Zookeeper/</url>
      
        <content type="html"><![CDATA[<h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p>​         Eureka本身是Netflix开源的一款提供服务注册和发现的产品，并且提供了相应的Java封装。在它的实现中，节点之间相互平等，部分注册中心的节点挂掉也不会对集群造成影响，即使集群只剩一个节点存活，也可以正常提供发现服务。哪怕是所有的服务注册节点都挂了，Eureka Clients（客户端）上也会缓存服务调用的信息。这就保证了我们微服务之间的互相调用足够健壮。 </p><pre><code>Spring Cloud Netflix在设计Eureka时遵守的就是AP原则。Eureka Server也可以运行多个实例来构建集群，解决单点问题，但不同于ZooKeeper的选举leader的过程，Eureka Server采用的是Peer to Peer对等通信。这是一种去中心化的架构，无master/slave区分，每一个Peer都是对等的。在这种架构中，节点通过彼此互相注册来提高可用性，每个节点需要添加一个或多个有效的serviceUrl指向其他节点。每个节点都可被视为其他节点的副本。</code></pre><p>​        如果某台Eureka Server宕机，Eureka Client的请求会自动切换到新的Eureka Server节点，当宕机的服务器重新恢复后，Eureka会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会进行replicateToPeer（节点间复制）操作，将请求复制到其他Eureka Server当前所知的所有节点中。</p><p>​        一个新的Eureka Server节点启动后，会首先尝试从邻近节点获取所有实例注册表信息，完成初始化。Eureka Server通过getEurekaServiceUrls()方法获取所有的节点，并且会通过心跳续约的方式定期更新。默认配置下，如果Eureka Server在一定时间内没有接收到某个服务实例的心跳，Eureka Server将会注销该实例（默认为90秒，通过eureka.instance.lease-expiration-duration-in-seconds配置）。当Eureka Server节点在短时间内丢失过多的心跳时（比如发生了网络分区故障），那么这个节点就会进入自我保护模式。</p><p>​         什么是自我保护模式？默认配置下，如果Eureka Server每分钟收到心跳续约的数量低于一个阈值（instance的数量(60/每个instance的心跳间隔秒数)自我保护系数），并且持续15分钟，就会触发自我保护。在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。它的设计哲学前面提到过，那就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。该模式可以通过eureka.server.enable-self-preservation = false来禁用，同时eureka.instance.lease-renewal-interval-in-seconds可以用来更改心跳间隔，eureka.server.renewal-percent-threshold可以用来修改自我保护系数（默认0.85）。 </p><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><pre><code>Zookeeper主要为大型分布式计算提供开源的分布式配置服务、同步服务和命名注册。曾经是Hadoop项目中的一个子项目，用来控制集群中的数据，目前已升级为独立的顶级项目。很多场景下也用它作为Service发现服务解决方案。 </code></pre><p>​        Zookeeper是基于CP来设计的，即任何时刻对Zookeeper的访问请求能得到一致的数据结果，同时系统对网络分割具备容错性，但是它不能保证每次服务请求的可用性。从实际情况来分析，在使用Zookeeper获取服务列表时，如果zookeeper正在选主，或者Zookeeper集群中半数以上机器不可用，那么将无法获得数据。所以说，Zookeeper不能保证服务可用性。</p><p>​        诚然，在大多数分布式环境中，尤其是涉及到数据存储的场景，数据一致性应该是首先被保证的，这也是zookeeper设计成CP的原因。但是对于服务发现场景来说，情况就不太一样了：针对同一个服务，即使注册中心的不同节点保存的服务提供者信息不尽相同，也并不会造成灾难性的后果。因为对于服务消费者来说，能消费才是最重要的——拿到可能不正确的服务实例信息后尝试消费一下，也好过因为无法获取实例信息而不去消费。（尝试一下可以快速失败，之后可以更新配置并重试）所以，对于服务发现而言，可用性比数据一致性更加重要——AP胜过CP。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flowable</title>
      <link href="/2019/11/21/flowable/"/>
      <url>/2019/11/21/flowable/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h2><ul><li><strong>ACT_RE_*</strong> :  ‘RE’代表<code>repository</code>。带有这个前缀的表包含“静态”信息，例如流程定义与流程资源（图片、规则等） .</li><li><strong>ACT_RU_*</strong>: ‘RU’代表<code>runtime</code>。这些表存储运行时信息，例如流程实例（process instance）、用户任务（user task）、变量（variable）、作业（job）等。 </li><li><strong>ACT_HI_*</strong>: ‘HI’代表<code>history</code>。这些表存储历史数据，例如已完成的流程实例、变量、任务等。 </li><li><strong>ACT_GE_*</strong>: 通用数据。在多处使用。 </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> flowable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Ant Design Pro</title>
      <link href="/2019/11/20/Docker%E9%83%A8%E7%BD%B2Ant-Design-Pro/"/>
      <url>/2019/11/20/Docker%E9%83%A8%E7%BD%B2Ant-Design-Pro/</url>
      
        <content type="html"><![CDATA[<h2 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h2><p>开发环境下的配置的反向代理在部署时，需要同步修改nginx.conf.</p><p>如 config.ts 配置的内容：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">    <span class="string">'/api/uaa'</span>: &#123;  </span><br><span class="line">      target: <span class="string">'http://192.168.0.148:8766'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      pathRewrite: &#123; <span class="string">'^/api/uaa'</span>: <span class="string">''</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'/api/message'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://192.168.0.148:8999'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      pathRewrite: &#123; <span class="string">'^/api/message'</span>: <span class="string">''</span> &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>nginx 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location ^~/api/uaa/ &#123;</span><br><span class="line">       proxy_pass http://192.168.0.148:8766/;</span><br><span class="line">       proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">       proxy_set_header   X-Real-IP         $remote_addr;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   location ^~/api/message/ &#123;</span><br><span class="line">       proxy_pass http://192.168.0.148:8999/;</span><br><span class="line">       proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">       proxy_set_header   X-Real-IP         $remote_addr;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> npm run docker-hub:build</span></span><br></pre></td></tr></table></figure><p>若出现以下情况，说明docker 未配置证书，参考IDEA 一键式发布应用到Docker进行配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: SSL error: HTTPSConnectionPool(host=&apos;host.com&apos;, port=2376): Max retries exceeded with url: /v1.25/info (Caused by SSLError(SSLError(1, u&apos;[SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:590)&apos;),))</span><br></pre></td></tr></table></figure><h2 id="打包完成，运行镜像"><a href="#打包完成，运行镜像" class="headerlink" title="打包完成，运行镜像"></a>打包完成，运行镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --net=host --name paas-ui Ant-Design-Pro</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Ant Design Pro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 一键式发布应用到Docker</title>
      <link href="/2019/11/20/IDEA%20%E4%B8%80%E9%94%AE%E5%BC%8F%E5%8F%91%E5%B8%83%E5%BA%94%E7%94%A8%E5%88%B0Docker/"/>
      <url>/2019/11/20/IDEA%20%E4%B8%80%E9%94%AE%E5%BC%8F%E5%8F%91%E5%B8%83%E5%BA%94%E7%94%A8%E5%88%B0Docker/</url>
      
        <content type="html"><![CDATA[<h2 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h2><h3 id="浪子版（裸奔版）"><a href="#浪子版（裸奔版）" class="headerlink" title="浪子版（裸奔版）"></a>浪子版（裸奔版）</h3><ol><li><p>修改docker.service 中ExecStart内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vi /usr/lib/systemd/system/docker.service</span></span><br></pre></td></tr></table></figure><p>将ExecStart 的内容修改如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H</span><br><span class="line">unix://var/run/docker.sock</span><br></pre></td></tr></table></figure></li><li><p>重启docker 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> service docker restart</span></span><br></pre></td></tr></table></figure></li><li><p>开放端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /sbin/iptables -I INPUT -p tcp --dport 2375 -j ACCEPT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables-save</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="绅士版-（CA）"><a href="#绅士版-（CA）" class="headerlink" title="绅士版 （CA）"></a>绅士版 （CA）</h3><h4 id="1-创建文件夹，保存CA"><a href="#1-创建文件夹，保存CA" class="headerlink" title="1. 创建文件夹，保存CA"></a>1. 创建文件夹，保存CA</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/ca</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ca</span></span><br></pre></td></tr></table></figure><h4 id="2-创建密码-根据提示输入两次密码"><a href="#2-创建密码-根据提示输入两次密码" class="headerlink" title="2. 创建密码,根据提示输入两次密码"></a>2. 创建密码,根据提示输入两次密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl genrsa -aes256 -out ca-key.pem 4096</span></span><br></pre></td></tr></table></figure><h4 id="3-输入组织信息"><a href="#3-输入组织信息" class="headerlink" title="3. 输入组织信息"></a>3. 输入组织信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span></span><br></pre></td></tr></table></figure><h4 id="4-生成server-key-pem"><a href="#4-生成server-key-pem" class="headerlink" title="4. 生成server-key.pem"></a>4. 生成server-key.pem</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl genrsa -out server-key.pem 4096</span></span><br></pre></td></tr></table></figure><h4 id="5-替换域名或IP"><a href="#5-替换域名或IP" class="headerlink" title="5. 替换域名或IP"></a>5. 替换域名或IP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl req -subj <span class="string">"/CN=<span class="variable">$HOST</span>"</span> -sha256 -new -key server-key.pem -out server.csr</span></span><br></pre></td></tr></table></figure><p>PS: 根据实际需求，将$HOST 修改为自己的域名或者IP。</p><h4 id="6-添加白名单"><a href="#6-添加白名单" class="headerlink" title="6. 添加白名单"></a>6. 添加白名单</h4><p>如果在5 配置是IP，执行命令1，反之执行命令2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> subjectAltName = IP:<span class="variable">$HOST</span>,IP:0.0.0.0 &gt;&gt; extfile.cnf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> subjectAltName = DNS:<span class="variable">$HOST</span>,IP:0.0.0.0 &gt;&gt; extfile.cnf</span></span><br></pre></td></tr></table></figure><h4 id="7-设置证书只做验证服务器身份"><a href="#7-设置证书只做验证服务器身份" class="headerlink" title="7. 设置证书只做验证服务器身份"></a>7. 设置证书只做验证服务器身份</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf</span></span><br></pre></td></tr></table></figure><h4 id="8-生成数字证书-输入之前的密码"><a href="#8-生成数字证书-输入之前的密码" class="headerlink" title="8. 生成数字证书,输入之前的密码"></a>8. 生成数字证书,输入之前的密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out server-cert.pem -extfile extfile.cnf</span></span><br></pre></td></tr></table></figure><h4 id="9-生成客户端的key-pem"><a href="#9-生成客户端的key-pem" class="headerlink" title="9. 生成客户端的key.pem"></a>9. 生成客户端的key.pem</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl genrsa -out key.pem 4096</span></span><br></pre></td></tr></table></figure><h4 id="10-配置客户端证书"><a href="#10-配置客户端证书" class="headerlink" title="10. 配置客户端证书"></a>10. 配置客户端证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl req -subj <span class="string">'/CN=client'</span> -new -key key.pem -out client.csr</span></span><br></pre></td></tr></table></figure><h4 id="11-配置客户端密钥"><a href="#11-配置客户端密钥" class="headerlink" title="11. 配置客户端密钥"></a>11. 配置客户端密钥</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span></span><br></pre></td></tr></table></figure><h4 id="12-生成签名证书"><a href="#12-生成签名证书" class="headerlink" title="12. 生成签名证书"></a>12. 生成签名证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out cert.pem -extfile extfile.cnf</span></span><br></pre></td></tr></table></figure><h4 id="13-删除不需要的文件"><a href="#13-删除不需要的文件" class="headerlink" title="13. 删除不需要的文件"></a>13. 删除不需要的文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm -v client.csr server.csr</span></span><br></pre></td></tr></table></figure><h4 id="14-设置密钥和证书只读"><a href="#14-设置密钥和证书只读" class="headerlink" title="14. 设置密钥和证书只读"></a>14. 设置密钥和证书只读</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chmod -v 0400 ca-key.pem key.pem server-key.pem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod -v 0444 ca.pem server-cert.pem cert.pem</span></span><br></pre></td></tr></table></figure><h4 id="15-归集证书"><a href="#15-归集证书" class="headerlink" title="15. 归集证书"></a>15. 归集证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cp server-*.pem  /etc/docker/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp ca.pem /etc/docker/</span></span><br></pre></td></tr></table></figure><h4 id="16-修改Docker-配置，仅接收CA证书的客户端"><a href="#16-修改Docker-配置，仅接收CA证书的客户端" class="headerlink" title="16. 修改Docker 配置，仅接收CA证书的客户端"></a>16. 修改Docker 配置，仅接收CA证书的客户端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /lib/systemd/system/docker.service</span></span><br></pre></td></tr></table></figure><p>将ExecStart 的内容修改如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/etc/docker/ca.pem --tlscert=/etc/docker/server-cert.pem --tlskey=/etc/docker/server-key.pem -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><h4 id="17-重新启动Docker"><a href="#17-重新启动Docker" class="headerlink" title="17. 重新启动Docker"></a>17. 重新启动Docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl restart docker</span></span><br></pre></td></tr></table></figure><h4 id="18-开放端口"><a href="#18-开放端口" class="headerlink" title="18. 开放端口"></a>18. 开放端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /sbin/iptables -I INPUT -p tcp --dport 2376 -j ACCEPT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables-save</span></span><br></pre></td></tr></table></figure><h2 id="IDEA-配置"><a href="#IDEA-配置" class="headerlink" title="IDEA 配置"></a>IDEA 配置</h2><ol><li><p>下载 docker integration   插件</p></li><li><p>添加Docker 配置</p><p><img src="/.com//D:%5Czzw%5Cblog%5Cimg%5Cdocker-setting.JPG" alt></p></li><li><p>POM配置，设置<packaging>jar</packaging>, 再执行maven:clean 生成jar</p></li><li><p>编写DcokerFile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> hub.c.<span class="number">163</span>.com/library/java:<span class="number">8</span>-jre</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> target/*.jar PaaSServer.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8761</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"PaaSServer.jar"</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>配置Run Configuration</p><p><img src="/.com//D:%5Czzw%5Cblog%5Cimg%5Cdocker_run_configuration.png" alt="image-20191120144754107"></p></li><li><p>点击运行，可在下方看到部署过程</p><p><img src="/.com//D:%5Czzw%5Cblog%5Cimg%5Cdocker_container.png" alt="image-20191120144907185"></p></li></ol><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://blog.csdn.net/ChineseYoung/article/details/83107353#commentsedit" target="_blank" rel="noopener">在idea中一键部署项目到Docker及CA认证</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 安装与卸载</title>
      <link href="/2019/11/20/docker-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
      <url>/2019/11/20/docker-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>这是一个勤勤恳恳的搬砖工</p><a id="more"></a><h2 id="Docker-是什么"><a href="#Docker-是什么" class="headerlink" title="Docker 是什么"></a>Docker 是什么</h2><p>集装箱，一键式打包部署环境，一次生成，处处运行。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h4><ul><li>linux 内核至少在3.8 以上，建议3.10以上。</li></ul><p>PS： 查看内核版本命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><ul><li>升级yum 版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><ul><li>安装相关依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ul><li>设置yum 源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h3><ol><li>查看docker 版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><ol start="2"><li><p>选择合适的版本,这里选择的是18.06.1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce-18.06.1.ce</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>设置docker 自启动 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>检查docker 安装是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></li></ol><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><ol><li><p>查看docker 安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep docker</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>删除安装的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove docker-engine.x86_64</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>删除镜像、容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/qgc1995/p/9553572.html" target="_blank" rel="noopener">Centos7下安装Docker</a></p><p>[<a href="https://www.cnblogs.com/a1260700062/p/9923349.html" target="_blank" rel="noopener">CentOS7上Docker安装与卸载</a>]</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你建博客</title>
      <link href="/2019/11/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>热衷技术分享的人总想搭建自己的博客，此文章将手把手带你搭建属于自己的博客。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>安装Git</p></li><li><p>安装NodeJS</p></li><li><p>注册github 账号</p></li><li><p>设置国内镜像地址</p><p>依次执行以下两条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set registry https://registry.npm.taobao.org</span><br><span class="line">$ npm info underscore</span><br></pre></td></tr></table></figure><p>配置成功，会在控制台显示对应的JSON信息。</p></li></ul><h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><h4 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h4><ol><li><p>创建文件夹，保存博客文档。</p></li><li><p>安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure></li><li><p>初始化hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></li><li><p>生成界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></li><li><p>启动服务,在浏览器打开控制台链接进行预览。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></li></ol><h4 id="github-配置"><a href="#github-配置" class="headerlink" title="github 配置"></a>github 配置</h4><ol><li><p>创建公共仓库【私有仓库会无法访问】，仓库名为 github账户名.github.io (如dwao.github.io)</p></li><li><p>修改博客文件夹目录下的_config.yml 的deploy信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &apos;git&apos;</span><br><span class="line">  repo: https://github.com/DWAO/DWAO.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><ol><li><p>安装git的部署工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>依次执行以下两条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hext g</span><br><span class="line">$ hext d</span><br></pre></td></tr></table></figure></li></ol><p>至此，你的博客搭建完成。稍等片刻，输入链接（地址为之间配置的仓库名,本例是dwao.github.io）.</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
